---
import Layout from "@layouts/Layout.astro";
import {getPlaylistData} from "@lib/api";
import {App} from "@components/App";
import {
  addMp4Srces,
  getMatchingDomainConfigKey,
  sortVideosCanonically,
} from "@lib/utils";
// FIGURE OUT WHICH PLAYLIST TO LOAD BASED ON DOMAIN
import {config} from "@src/domainConfig";

let originToMatch = import.meta.env.PROD ? Astro.url.origin : "bermuda";
const configRecord = getMatchingDomainConfigKey(config, originToMatch);
if (!configRecord) return new Response(404);
const playlistToFetch = configRecord.playlist;

// cloudflare env is on local.runtime, .env is import.meta for localhost.
const {env} = import.meta.env.DEV ? import.meta : Astro.locals.runtime;
const data = await getPlaylistData(playlistToFetch, env);
if (!data) return new Response(404);
const playlist = data.data;
if (!playlist || !playlist.videos) {
  throw new Error("No videos found");
}
sortVideosCanonically(playlist.videos);
playlist.videos = addMp4Srces(playlist.videos);

const {slug} = Astro.params;
const parts = slug ? slug.split("/") : null;
const book = parts?.[0] ?? "mat";
const chapter = parts?.[1] ?? "1";
const intialVid = playlist.videos.find((vid) => {
  const matchesBook =
    vid.custom_fields?.book?.toLowerCase() === book.toLowerCase() ||
    vid.custom_fields.localized_book_name.toLowerCase() === book.toLowerCase();
  const matchesChapter = Number(vid.custom_fields.chapter) === Number(chapter);
  return matchesBook && matchesChapter;
});
---

<Layout title={configRecord.title}>
  <App
    playlist={playlist}
    initialVideo={intialVid || playlist.videos[0]}
    client:load
  />
</Layout>
